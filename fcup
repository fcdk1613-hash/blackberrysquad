import asyncio
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"
GROUP_CHAT_ID = -1001234567890  # üî• –£–∫–∞–∂–∏ —Å—é–¥–∞ ID –≤–∞—à–µ–≥–æ –æ–±—â–µ–≥–æ —á–∞—Ç–∞

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS commanders (
    user_id INTEGER PRIMARY KEY,
    phone TEXT,
    team_name TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS judges (
    user_id INTEGER PRIMARY KEY,
    phone TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team_id INTEGER,
    date TEXT,
    time TEXT,
    result TEXT
)
""")
conn.commit()

# FSM
class RegisterCommander(StatesGroup):
    waiting_for_team_name = State()

class RegisterJudge(StatesGroup):
    pass

class GameSchedule(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()

# –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤
commander_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")],
        [KeyboardButton(text="üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

# –ú–µ–Ω—é —Å—É–¥–µ–π
judge_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# /start
@dp.message(F.text == "/start")
async def start(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")],
            [KeyboardButton(text="–Ø - —Å—É–¥—å—è")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥–∏—Ä–∞
@dp.message(F.text == "–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")
async def register_commander(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
    await state.set_state(RegisterCommander.waiting_for_team_name)

@dp.message(F.contact, RegisterCommander.waiting_for_team_name)
async def process_commander_contact(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    user_id = message.from_user.id
    cursor.execute("INSERT OR REPLACE INTO commanders (user_id, phone, team_name) VALUES (?, ?, ?)",
                   (user_id, phone, None))
    conn.commit()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
    await state.update_data(phone=phone)

@dp.message(RegisterCommander.waiting_for_team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    team_name = message.text
    user_id = message.from_user.id
    cursor.execute("UPDATE commanders SET team_name=? WHERE user_id=?", (team_name, user_id))
    conn.commit()
    await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {team_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=commander_menu)
    await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—É–¥—å–∏
@dp.message(F.text == "–Ø - —Å—É–¥—å—è")
async def register_judge(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@dp.message(F.contact)
async def process_judge_contact(message: types.Message):
    phone = message.contact.phone_number
    user_id = message.from_user.id
    cursor.execute("INSERT OR REPLACE INTO judges (user_id, phone) VALUES (?, ?)", (user_id, phone))
    conn.commit()
    await message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–¥—å—è!", reply_markup=judge_menu)

# –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É
@dp.message(F.text == "üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")
async def choose_date(message: types.Message, state: FSMContext):
    today = datetime.today()
    dates = [(today + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=d)] for d in dates],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)
    await state.set_state(GameSchedule.waiting_for_date)

@dp.message(GameSchedule.waiting_for_date)
async def on_date_chosen(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="19:00")],
            [KeyboardButton(text="20:00")],
            [KeyboardButton(text="21:00")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    await state.set_state(GameSchedule.waiting_for_time)

@dp.message(GameSchedule.waiting_for_time, F.text.in_(["19:00", "20:00", "21:00"]))
async def process_time(message: types.Message, state: FSMContext):
    time = message.text
    data = await state.get_data()
    date = data.get("date")
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á
    cursor.execute("INSERT INTO matches (team_id, date, time, result) VALUES (?, ?, ?, ?)",
                   (user_id, date, time, None))
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
    cursor.execute("SELECT team_id FROM matches WHERE date=? AND time=? AND result IS NULL", (date, time))
    teams = [row[0] for row in cursor.fetchall()]

    if len(teams) == 2:  # –ù–∞—à–ª–∏—Å—å –¥–≤–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (teams[0],))
        team1 = cursor.fetchone()[0] or f"ID {teams[0]}"
        cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (teams[1],))
        team2 = cursor.fetchone()[0] or f"ID {teams[1]}"

        text = f"‚öîÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Ç—á!\nüìÖ {date} ‚è∞ {time}\nüèÜ {team1} vs {team2}"

        # –õ–° –∫–æ–º–∞–Ω–¥–∏—Ä–∞–º
        for t in teams:
            try:
                await bot.send_message(t, text)
            except:
                pass

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
        try:
            await bot.send_message(GROUP_CHAT_ID, text)
        except:
            pass

    await message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ—Ç: {date} {time}. –ñ–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!", reply_markup=commander_menu)
    await state.clear()

# –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@dp.message(F.text == "üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT date, time, result FROM matches WHERE team_id=?", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return
    text = "üìñ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
    for row in rows:
        text += f"{row[0]} {row[1]} - {row[2] or '–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
    await message.answer(text)

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É
@dp.message(F.text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")
async def results_by_date(message: types.Message):
    cursor.execute("SELECT DISTINCT date FROM matches WHERE result IS NOT NULL ORDER BY date")
    dates = [r[0] for r in cursor.fetchall()]
    if not dates:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=d, callback_data=f"resdate:{d}")] for d in dates]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("resdate:"))
async def show_results(callback: types.CallbackQuery):
    date = callback.data.split(":")[1]
    cursor.execute("SELECT team_id, time, result FROM matches WHERE date=? AND result IS NOT NULL", (date,))
    rows = cursor.fetchall()
    if not rows:
        await callback.message.answer("–í —ç—Ç–æ—Ç –¥–µ–Ω—å –º–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    text = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {date}:\n"
    for row in rows:
        text += f"–ö–æ–º–∞–Ω–¥–∞ {row[0]} ‚Äî {row[1]} ‚Äî {row[2]}\n"
    await callback.message.answer(text)

# –ó–∞–ø—É—Å–∫
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
