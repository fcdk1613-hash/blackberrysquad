import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"

logging.basicConfig(level=logging.INFO)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS commanders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    phone TEXT,
    team_name TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS judges (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    phone TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team1 TEXT,
    team2 TEXT,
    datetime TEXT,
    result TEXT,
    judge_id INTEGER
)
""")

conn.commit()

# === –ö–Ω–æ–ø–∫–∏ ===
role_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")],
        [KeyboardButton(text="–Ø - —Å—É–¥—å—è")]
    ],
    resize_keyboard=True
)

contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
    resize_keyboard=True
)

main_keyboard_commander = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á")],
        [KeyboardButton("–ú–æ–∏ –º–∞—Ç—á–∏")]
    ],
    resize_keyboard=True
)

main_keyboard_judge = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")],
        [KeyboardButton("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è")]
    ],
    resize_keyboard=True
)

# === –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
user_state = {}

# === Bot & Dispatcher ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –°—Ç–∞—Ä—Ç ===
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:", reply_markup=role_keyboard)

# === –í—ã–±–æ—Ä —Ä–æ–ª–∏ ===
@dp.message(F.text.in_(["–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä", "–Ø - —Å—É–¥—å—è"]))
async def choose_role(message: types.Message):
    role = "commander" if "–∫–æ–º–∞–Ω–¥–∏—Ä" in message.text else "judge"
    user_state[message.from_user.id] = {"role": role}
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_keyboard)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
@dp.message(F.contact)
async def get_contact(message: types.Message):
    uid = message.from_user.id
    phone = message.contact.phone_number
    role = user_state.get(uid, {}).get("role")

    if role == "commander":
        user_state[uid]["phone"] = phone
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:", reply_markup=ReplyKeyboardRemove())
        user_state[uid]["step"] = "team_name"

    elif role == "judge":
        cursor.execute("INSERT OR REPLACE INTO judges (user_id, phone) VALUES (?, ?)", (uid, phone))
        conn.commit()
        await message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–¥—å—è!", reply_markup=main_keyboard_judge)

# === –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ===
@dp.message(F.text)
async def text_handler(message: types.Message):
    uid = message.from_user.id
    state = user_state.get(uid, {})

    # —à–∞–≥: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if state.get("step") == "team_name":
        phone = state["phone"]
        team = message.text
        cursor.execute("INSERT OR REPLACE INTO commanders (user_id, phone, team_name) VALUES (?, ?, ?)", (uid, phone, team))
        conn.commit()
        await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{team}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=main_keyboard_commander)
        user_state[uid] = {}
        return

    # —à–∞–≥: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞
    if state.get("step") == "choose_time":
        chosen_time = message.text
        if chosen_time not in state["options"]:
            await message.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.")
            return

        cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (uid,))
        team = cursor.fetchone()[0]

        cursor.execute("INSERT INTO matches (team1, datetime) VALUES (?, ?)", (team, chosen_time))
        conn.commit()

        await message.answer(f"üìÖ –ú–∞—Ç—á –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {chosen_time}", reply_markup=main_keyboard_commander)
        user_state[uid] = {}
        return

    # —à–∞–≥: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—É–¥—å—ë–π
    if state.get("step") == "add_result":
        match_id = state["match_id"]
        result = message.text
        cursor.execute("UPDATE matches SET result = ?, judge_id = ? WHERE id = ?", (result, uid, match_id))
        conn.commit()
        await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_keyboard_judge)
        user_state[uid] = {}
        return

# === –ö–æ–º–∞–Ω–¥–∏—Ä—ã ===
@dp.message(F.text == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á")
async def plan_match(message: types.Message):
    uid = message.from_user.id
    today = datetime.now().date()
    options = []

    for i in range((6 - today.weekday()) + 1):  # –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ–¥–µ–ª–∏
        day = today + timedelta(days=i)
        for hour in range(19, 22):
            for minute in [0, 30]:
                dt = datetime.combine(day, datetime.min.time()).replace(hour=hour, minute=minute)
                options.append(dt.strftime("%Y-%m-%d %H:%M"))

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=o)] for o in options],
        resize_keyboard=True
    )

    user_state[uid] = {"step": "choose_time", "options": options}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:", reply_markup=kb)

@dp.message(F.text == "–ú–æ–∏ –º–∞—Ç—á–∏")
async def my_matches(message: types.Message):
    uid = message.from_user.id
    cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (uid,))
    row = cursor.fetchone()
    if not row:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    team = row[0]
    cursor.execute("SELECT datetime, result FROM matches WHERE team1 = ?", (team,))
    matches = cursor.fetchall()

    if not matches:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.")
    else:
        text = "üìñ –í–∞—à–∏ –º–∞—Ç—á–∏:\n"
        for m in matches:
            text += f"{m[0]} ‚Äî {m[1] if m[1] else '–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}\n"
        await message.answer(text)

# === –°—É–¥—å–∏ ===
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")
async def add_result(message: types.Message):
    cursor.execute("SELECT id, team1, datetime, result FROM matches WHERE result IS NULL")
    matches = cursor.fetchall()

    if not matches:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –º–∞—Ç—á–µ–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ ID –º–∞—Ç—á–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
    for m in matches:
        text += f"ID {m[0]} ‚Äî {m[1]} ({m[2]})\n"

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"ID {m[0]}")] for m in matches],
        resize_keyboard=True
    )

    user_state[message.from_user.id] = {"step": "pick_match", "matches": matches}
    await message.answer(text, reply_markup=kb)

@dp.message(F.text.regexp(r"^ID \d+$"))
async def pick_match(message: types.Message):
    uid = message.from_user.id
    match_id = int(message.text.split()[1])

    cursor.execute("SELECT id FROM matches WHERE id = ?", (match_id,))
    if not cursor.fetchone():
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –º–∞—Ç—á–∞ –Ω–µ—Ç.")
        return

    user_state[uid] = {"step": "add_result", "match_id": match_id}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: TeamA 3:2 TeamB)", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
async def today_results(message: types.Message):
    today = datetime.now().date()
    cursor.execute("SELECT team1, datetime, result FROM matches WHERE date(datetime) = ?", (today,))
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –±—ã–ª–æ –º–∞—Ç—á–µ–π.")
    else:
        text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for m in matches:
            text += f"{m[1]} ‚Äî {m[0]} ‚Äî {m[2] if m[2] else '–±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
        await message.answer(text)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
