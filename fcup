import asyncio
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# üîë –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("squad.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS commanders (
    user_id INTEGER PRIMARY KEY,
    phone TEXT,
    team_name TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS judges (
    user_id INTEGER PRIMARY KEY,
    phone TEXT,
    name TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team1 TEXT,
    team2 TEXT,
    match_time TEXT,
    result TEXT,
    judge_id INTEGER
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS roles (
    user_id INTEGER PRIMARY KEY,
    role TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS temp_schedule (
    user_id INTEGER PRIMARY KEY,
    datetime TEXT
)
""")
conn.commit()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")],
        [KeyboardButton(text="–Ø - —Å—É–¥—å—è")]
    ],
    resize_keyboard=True
)

commander_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á")],
        [KeyboardButton(text="–ú–æ–∏ –º–∞—Ç—á–∏")]
    ],
    resize_keyboard=True
)

judge_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")],
        [KeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è")]
    ],
    resize_keyboard=True
)

# --- /start ---
@dp.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=main_kb)

# --- –í—ã–±–æ—Ä —Ä–æ–ª–∏ ---
@dp.message(F.text == "–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")
async def register_commander(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR REPLACE INTO roles (user_id, role) VALUES (?, ?)", (user_id, "commander"))
    conn.commit()
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=kb)

@dp.message(F.text == "–Ø - —Å—É–¥—å—è")
async def register_judge(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR REPLACE INTO roles (user_id, role) VALUES (?, ?)", (user_id, "judge"))
    conn.commit()
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=kb)

# --- –ö–æ–Ω—Ç–∞–∫—Ç ---
@dp.message(F.contact)
async def process_contact(message: types.Message):
    phone = message.contact.phone_number
    user_id = message.from_user.id
    role_row = cursor.execute("SELECT role FROM roles WHERE user_id = ?", (user_id,)).fetchone()

    if not role_row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.", reply_markup=main_kb)
        return

    role = role_row[0]

    if role == "commander":
        cursor.execute("INSERT OR REPLACE INTO commanders (user_id, phone, team_name) VALUES (?, ?, ?)",
                       (user_id, phone, None))
        conn.commit()
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:", reply_markup=ReplyKeyboardRemove())

    elif role == "judge":
        cursor.execute("INSERT OR REPLACE INTO judges (user_id, phone, name) VALUES (?, ?, ?)",
                       (user_id, phone, message.from_user.full_name))
        conn.commit()
        await message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–¥—å—è!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=judge_menu)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(F.text & ~F.via_bot & ~F.contact)
async def save_team_name(message: types.Message):
    user_id = message.from_user.id
    commander = cursor.execute(
        "SELECT * FROM commanders WHERE user_id = ? AND team_name IS NULL", (user_id,)
    ).fetchone()

    if commander:
        cursor.execute("UPDATE commanders SET team_name = ? WHERE user_id = ?", (message.text, user_id))
        conn.commit()
        await message.answer(
            f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{message.text}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=commander_menu
        )

# --- –ö–æ–º–∞–Ω–¥–∏—Ä: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á ---
@dp.message(F.text == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á")
async def schedule_match(message: types.Message):
    now = datetime.now()
    slots = []
    for i in range(7 - now.weekday()):  # –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ–¥–µ–ª–∏
        day = now + timedelta(days=i)
        for hour in range(19, 22):
            slots.append((day.replace(hour=hour, minute=0), f"{day.strftime('%d.%m')} {hour:02d}:00"))
            slots.append((day.replace(hour=hour, minute=30), f"{day.strftime('%d.%m')} {hour:02d}:30"))

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=slot[1])] for slot in slots],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –º–∞—Ç—á–∞:", reply_markup=kb)

# --- –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ---
@dp.message(F.text.regexp(r"\d{2}\.\d{2} \d{2}:\d{2}"))
async def process_time_choice(message: types.Message):
    user_id = message.from_user.id
    team_row = cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (user_id,)).fetchone()
    if not team_row:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∏—Ä.")
        return

    team_name = team_row[0]
    slot = datetime.strptime(message.text, "%d.%m %H:%M")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    cursor.execute("INSERT OR REPLACE INTO temp_schedule (user_id, datetime) VALUES (?, ?)", (user_id, slot.isoformat()))
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    opponent_row = cursor.execute(
        "SELECT user_id FROM temp_schedule WHERE datetime = ? AND user_id != ?",
        (slot.isoformat(), user_id)
    ).fetchone()

    if opponent_row:
        opponent_id = opponent_row[0]
        opponent_team = cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (opponent_id,)).fetchone()
        if opponent_team:
            cursor.execute(
                "INSERT INTO matches (team1, team2, match_time, result, judge_id) VALUES (?, ?, ?, ?, ?)",
                (team_name, opponent_team[0], slot.isoformat(), None, None)
            )
            conn.commit()
            cursor.execute("DELETE FROM temp_schedule WHERE datetime = ?", (slot.isoformat(),))
            conn.commit()
            await bot.send_message(user_id, f"‚úÖ –ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω: {team_name} vs {opponent_team[0]} –≤ {message.text}")
            await bot.send_message(opponent_id, f"‚úÖ –ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω: {opponent_team[0]} vs {team_name} –≤ {message.text}")
        else:
            await message.answer("–û—à–∏–±–∫–∞: —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await message.answer(f"–°–ª–æ—Ç {message.text} –≤—ã–±—Ä–∞–Ω! –ñ–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...", reply_markup=commander_menu)

# --- –ö–æ–º–∞–Ω–¥–∏—Ä: –ú–æ–∏ –º–∞—Ç—á–∏ ---
@dp.message(F.text == "–ú–æ–∏ –º–∞—Ç—á–∏")
async def my_matches(message: types.Message):
    user_id = message.from_user.id
    team = cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (user_id,)).fetchone()
    if not team:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∏—Ä.")
        return

    matches = cursor.execute(
        "SELECT team1, team2, match_time, result FROM matches WHERE team1 = ? OR team2 = ?",
        (team[0], team[0])
    ).fetchall()

    if not matches:
        await message.answer("–£ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.")
        return

    reply = f"–ú–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã {team[0]}:\n"
    for m in matches:
        reply += f"{m[0]} vs {m[1]} ‚Äî {m[2]} ‚Äî {m[3] or '–µ—â—ë –Ω–µ —Å—ã–≥—Ä–∞–Ω'}\n"

    await message.answer(reply)

# --- –°—É–¥—å—è: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")
async def add_result(message: types.Message):
    matches = cursor.execute("SELECT id, team1, team2, match_time FROM matches WHERE result IS NULL").fetchall()
    if not matches:
        await message.answer("–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{m[0]}: {m[1]} vs {m[2]} ({m[3]})")] for m in matches],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á:", reply_markup=kb)

@dp.message(F.text.regexp(r"^\d+:"))
async def save_result(message: types.Message):
    match_id = int(message.text.split(":")[0])
    cursor.execute("UPDATE matches SET result = ? WHERE id = ?", ("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ—Å—ë–Ω", match_id))
    conn.commit()
    await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=judge_menu)

# --- –°—É–¥—å—è: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è ---
@dp.message(F.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
async def today_results(message: types.Message):
    today = datetime.now().date()
    matches = cursor.execute("SELECT team1, team2, match_time, result FROM matches").fetchall()
    results = [m for m in matches if datetime.fromisoformat(m[2]).date() == today]

    if not results:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –º–∞—Ç—á–µ–π –Ω–µ—Ç.")
        return

    reply = "–ú–∞—Ç—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for m in results:
        reply += f"{m[0]} vs {m[1]} ‚Äî {m[3] or '–µ—â—ë –Ω–µ —Å—ã–≥—Ä–∞–Ω'}\n"

    await message.answer(reply)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
