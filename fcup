import logging
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ===== –ë–î =====
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS commanders (
    user_id INTEGER PRIMARY KEY,
    team_name TEXT,
    role TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS judges (
    user_id INTEGER PRIMARY KEY,
    phone TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team1_id INTEGER,
    team2_id INTEGER,
    date TEXT,
    time TEXT,
    result TEXT
)
""")
conn.commit()

# ===== FSM =====
class RegisterTeam(StatesGroup):
    waiting_for_name = State()

class RegisterJudge(StatesGroup):
    waiting_for_phone = State()

class ScheduleMatch(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()

class MatchResult(StatesGroup):
    waiting_for_match_id = State()
    waiting_for_result = State()

# ===== –ö–Ω–æ–ø–∫–∏ =====
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä"), KeyboardButton("–Ø - —Å—É–¥—å—è")]
    ],
    resize_keyboard=True
)

commander_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Ç—á")],
        [KeyboardButton("üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

judge_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("‚öñÔ∏è –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")],
        [KeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

# ===== /start =====
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=main_menu)

# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è =====
@dp.message(lambda m: m.text == "–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")
async def register_commander(message: types.Message, state: FSMContext):
    await state.set_state(RegisterTeam.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")

@dp.message(RegisterTeam.waiting_for_name)
async def save_team_name(message: types.Message, state: FSMContext):
    cursor.execute("INSERT OR REPLACE INTO commanders (user_id, team_name, role) VALUES (?, ?, ?)",
                   (message.from_user.id, message.text, "commander"))
    conn.commit()
    await state.clear()
    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{message.text}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=commander_menu)

@dp.message(lambda m: m.text == "–Ø - —Å—É–¥—å—è")
async def register_judge(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True
    )
    await state.set_state(RegisterJudge.waiting_for_phone)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@dp.message(RegisterJudge.waiting_for_phone, lambda m: m.contact is not None)
async def save_judge_phone(message: types.Message, state: FSMContext):
    cursor.execute("INSERT OR REPLACE INTO judges (user_id, phone) VALUES (?, ?)",
                   (message.from_user.id, message.contact.phone_number))
    conn.commit()
    await state.clear()
    await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–¥—å—è!", reply_markup=judge_menu)

# ===== –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ =====
@dp.message(lambda m: m.text == "üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Ç—á")
async def schedule_match(message: types.Message, state: FSMContext):
    today = datetime.now().date()
    dates = [(today + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(d)] for d in dates],
        resize_keyboard=True
    )
    await state.set_state(ScheduleMatch.waiting_for_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.message(ScheduleMatch.waiting_for_date)
async def choose_time(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("19:00"), KeyboardButton("20:00"), KeyboardButton("21:00")]
        ],
        resize_keyboard=True
    )
    await state.set_state(ScheduleMatch.waiting_for_time)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)

@dp.message(ScheduleMatch.waiting_for_time)
async def finalize_match(message: types.Message, state: FSMContext):
    data = await state.get_data()
    date, time = data["date"], message.text

    user_id = message.from_user.id
    cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (user_id,))
    team = cursor.fetchone()
    if not team:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∏—Ä.")
        return
    team_name = team[0]

    cursor.execute("SELECT id, team1_id, team2_id FROM matches WHERE date=? AND time=?", (date, time))
    existing = cursor.fetchone()

    if not existing:
        cursor.execute("INSERT INTO matches (team1_id, date, time) VALUES (?, ?, ?)",
                       (user_id, date, time))
        conn.commit()
        await message.answer(f"–ú–∞—Ç—á –Ω–∞ {date} {time} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –∑–∞ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π {team_name}.")
    else:
        match_id, team1_id, team2_id = existing
        if team2_id is None and team1_id != user_id:
            cursor.execute("UPDATE matches SET team2_id=? WHERE id=?", (user_id, match_id))
            conn.commit()
            # —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤
            cursor.execute("SELECT user_id FROM commanders")
            commanders = cursor.fetchall()
            for cmd in commanders:
                await bot.send_message(cmd[0], f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Ç—á {date} {time}: –∫–æ–º–∞–Ω–¥—ã {team_name} –∏ –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞!")
        else:
            await message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")

    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=commander_menu)

# ===== –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ =====
@dp.message(lambda m: m.text == "üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT date, time, result FROM matches WHERE team1_id=? OR team2_id=?", (user_id, user_id))
    matches = cursor.fetchall()
    if matches:
        text = "\n".join([f"{d} {t} | {r if r else '‚Äî'}" for d, t, r in matches])
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π."
    await message.answer(text)

# ===== –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç =====
@dp.message(lambda m: m.text == "‚öñÔ∏è –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")
async def ask_match_id(message: types.Message, state: FSMContext):
    cursor.execute("SELECT id, date, time FROM matches WHERE result IS NULL")
    matches = cursor.fetchall()
    if not matches:
        await message.answer("–ù–µ—Ç –º–∞—Ç—á–µ–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
        return
    text = "\n".join([f"ID {mid}: {d} {t}" for mid, d, t in matches])
    await state.set_state(MatchResult.waiting_for_match_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ ID –º–∞—Ç—á–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n" + text)

@dp.message(MatchResult.waiting_for_match_id)
async def get_result_text(message: types.Message, state: FSMContext):
    await state.update_data(match_id=message.text)
    await state.set_state(MatchResult.waiting_for_result)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1):")

@dp.message(MatchResult.waiting_for_result)
async def save_result(message: types.Message, state: FSMContext):
    data = await state.get_data()
    match_id, result = data["match_id"], message.text
    cursor.execute("UPDATE matches SET result=? WHERE id=?", (result, match_id))
    conn.commit()
    await state.clear()
    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ {match_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {result}")

# ===== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É =====
@dp.message(lambda m: m.text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")
async def results_by_date(message: types.Message):
    today = datetime.now().date()
    dates = [(today - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(d)] for d in dates],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.message(lambda m: m.text and len(m.text) == 10 and "-" in m.text)
async def show_results(message: types.Message):
    date = message.text
    cursor.execute("SELECT time, result FROM matches WHERE date=?", (date,))
    matches = cursor.fetchall()
    if matches:
        text = "\n".join([f"{time} | {res if res else '‚Äî'}" for time, res in matches])
    else:
        text = "–ù–µ—Ç –º–∞—Ç—á–µ–π –∑–∞ —ç—Ç—É –¥–∞—Ç—É."
    await message.answer(text)

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    import asyncio
    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    asyncio.run(main())
