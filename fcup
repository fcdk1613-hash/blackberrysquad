import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)

# ---- DB INIT ----
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    phone TEXT,
    role TEXT,
    team_name TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team_id INTEGER,
    date TEXT,
    time TEXT,
    result TEXT,
    FOREIGN KEY (team_id) REFERENCES users (user_id)
)
""")

conn.commit()

# ---- FSM ----
class RegisterCommander(StatesGroup):
    waiting_for_team_name = State()

class MatchResult(StatesGroup):
    waiting_for_match_id = State()
    waiting_for_result = State()

# ---- BOT ----
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher(storage=MemoryStorage())

# ---- KEYBOARDS ----
role_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõ° –Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")],
        [KeyboardButton(text="‚öñ –Ø - —Å—É–¥—å—è")]
    ],
    resize_keyboard=True
)

contact_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
    resize_keyboard=True
)

commander_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")],
        [KeyboardButton(text="üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

judge_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úç –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")],
        [KeyboardButton(text="üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞—Ç–µ")]
    ],
    resize_keyboard=True
)

# ---- HANDLERS ----
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=role_kb)

@dp.message(F.text == "üõ° –Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")
async def register_commander(message: Message, state: FSMContext):
    await state.update_data(role="commander")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_kb)

@dp.message(F.text == "‚öñ –Ø - —Å—É–¥—å—è")
async def register_judge(message: Message, state: FSMContext):
    await state.update_data(role="judge")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_kb)

@dp.message(F.contact)
async def save_contact(message: Message, state: FSMContext):
    role = (await state.get_data()).get("role")
    phone = message.contact.phone_number
    user_id = message.from_user.id

    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    existing = cursor.fetchone()

    if existing:
        cursor.execute("UPDATE users SET phone=?, role=? WHERE user_id=?", (phone, role, user_id))
    else:
        cursor.execute("INSERT INTO users (user_id, phone, role) VALUES (?, ?, ?)", (user_id, phone, role))

    conn.commit()

    if role == "commander":
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã:")
        await state.set_state(RegisterCommander.waiting_for_team_name)
    else:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ —Å—É–¥—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=judge_menu)
        await state.clear()

@dp.message(RegisterCommander.waiting_for_team_name)
async def save_team_name(message: Message, state: FSMContext):
    team_name = message.text
    user_id = message.from_user.id

    cursor.execute("UPDATE users SET team_name=? WHERE user_id=?", (team_name, user_id))
    conn.commit()

    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ <b>{team_name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ", reply_markup=commander_menu)
    await state.clear()

# ---- –ö–æ–º–∞–Ω–¥–∏—Ä ----
@dp.message(F.text == "üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")
async def schedule_game(message: Message):
    dates = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è 19:00", callback_data="today_19:00")],
            [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è 19:30", callback_data="today_19:30")],
            [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞ 20:00", callback_data="tomorrow_20:00")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã:", reply_markup=dates)

@dp.callback_query(F.data.contains("_"))
async def save_game_slot(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    date, time = callback.data.split("_")

    cursor.execute("INSERT INTO matches (team_id, date, time, result) VALUES (?, ?, ?, ?)",
                   (user_id, date, time, None))
    conn.commit()

    await callback.message.answer(f"–ò–≥—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: {date} –≤ {time} ‚úÖ")
    await callback.answer()

@dp.message(F.text == "üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: Message):
    user_id = message.from_user.id
    cursor.execute("SELECT date, time, result FROM matches WHERE team_id=?", (user_id,))
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä ‚ùå")
        return

    text = "<b>–¢–≤–æ–∏ –∏–≥—Ä—ã:</b>\n"
    for m in matches:
        text += f"üìÖ {m[0]} {m[1]} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {m[2] or '‚Äî'}\n"

    await message.answer(text)

# ---- –°—É–¥—å—è ----
@dp.message(F.text == "‚úç –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")
async def choose_match(message: Message, state: FSMContext):
    cursor.execute("SELECT id, date, time FROM matches WHERE result IS NULL")
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–ù–µ—Ç –º–∞—Ç—á–µ–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚ùå")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"{m[1]} {m[2]} (ID {m[0]})", callback_data=f"match_{m[0]}")] for m in matches]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –º–∞—Ç—á –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", reply_markup=kb)

@dp.callback_query(F.data.startswith("match_"))
async def pick_match(callback: types.CallbackQuery, state: FSMContext):
    match_id = int(callback.data.split("_")[1])
    await state.update_data(match_id=match_id)
    await state.set_state(MatchResult.waiting_for_result)
    await callback.message.answer("–í–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2:1):")
    await callback.answer()

@dp.message(MatchResult.waiting_for_result)
async def save_result(message: Message, state: FSMContext):
    data = await state.get_data()
    match_id = data.get("match_id")
    result = message.text

    cursor.execute("UPDATE matches SET result=? WHERE id=?", (result, match_id))
    conn.commit()

    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {result} —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
    await state.clear()

@dp.message(F.text == "üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞—Ç–µ")
async def results_by_date(message: Message):
    cursor.execute("SELECT date, time, result FROM matches WHERE result IS NOT NULL")
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–ù–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π ‚ùå")
        return

    text = "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π:</b>\n"
    for m in matches:
        text += f"üìÖ {m[0]} {m[1]} | üî¢ {m[2]}\n"

    await message.answer(text)

# ---- MAIN ----
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
