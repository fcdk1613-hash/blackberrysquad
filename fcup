import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ---------------- –ë–ê–ó–ê ---------------- #
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS commanders (
    user_id INTEGER PRIMARY KEY,
    phone TEXT,
    team_name TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS judges (
    user_id INTEGER PRIMARY KEY,
    phone TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team_id INTEGER,
    date TEXT,
    time TEXT,
    result TEXT
)
""")
conn.commit()

# ---------------- FSM ---------------- #
class RegisterCommander(StatesGroup):
    waiting_team_name = State()

class RegisterJudge(StatesGroup):
    waiting_phone = State()

class AddResult(StatesGroup):
    waiting_result = State()

# ---------------- –ö–ù–û–ü–ö–ò ---------------- #
role_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")],
        [KeyboardButton(text="–Ø - —Å—É–¥—å—è")]
    ],
    resize_keyboard=True
)

commander_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")],
        [KeyboardButton(text="üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

judge_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")]
    ],
    resize_keyboard=True
)

# ---------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---------------- #
@dp.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_kb)

# === –ö–æ–º–∞–Ω–¥–∏—Ä === #
@dp.message(F.text == "–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")
async def commander_register(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@dp.message(F.contact)
async def save_commander_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    phone = message.contact.phone_number

    cursor.execute("INSERT OR REPLACE INTO commanders (user_id, phone, team_name) VALUES (?, ?, ?)",
                   (user_id, phone, None))
    conn.commit()

    await state.set_state(RegisterCommander.waiting_team_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=ReplyKeyboardRemove())

@dp.message(RegisterCommander.waiting_team_name)
async def save_team_name(message: types.Message, state: FSMContext):
    team_name = message.text
    user_id = message.from_user.id

    cursor.execute("UPDATE commanders SET team_name=? WHERE user_id=?", (team_name, user_id))
    conn.commit()

    await state.clear()
    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ <b>{team_name}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=commander_menu, parse_mode="HTML")

# === –°—É–¥—å—è === #
@dp.message(F.text == "–Ø - —Å—É–¥—å—è")
async def judge_register(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@dp.message(F.contact, RegisterJudge.waiting_phone)
async def save_judge_phone(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    phone = message.contact.phone_number

    cursor.execute("INSERT OR REPLACE INTO judges (user_id, phone) VALUES (?, ?)", (user_id, phone))
    conn.commit()

    await state.clear()
    await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–¥—å—è.", reply_markup=judge_menu)

# === –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ === #
@dp.message(F.text == "üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")
async def schedule_game(message: types.Message):
    today = datetime.today()
    dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=d, callback_data=f"slot_date:{d}")] for d in dates]
    )
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("slot_date:"))
async def on_date_chosen(callback: types.CallbackQuery):
    date_iso = callback.data.split(":")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="19:00", callback_data=f"slot_time:{date_iso}|19:00")],
        [InlineKeyboardButton(text="20:00", callback_data=f"slot_time:{date_iso}|20:00")],
        [InlineKeyboardButton(text="21:00", callback_data=f"slot_time:{date_iso}|21:00")]
    ])
    await callback.message.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("slot_time:"))
async def save_game_slot(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    date, time = callback.data.split(":")[1].split("|")

    cursor.execute("INSERT INTO matches (team_id, date, time, result) VALUES (?, ?, ?, ?)",
                   (user_id, date, time, None))
    conn.commit()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    cursor.execute("SELECT team_id FROM matches WHERE date=? AND time=? AND team_id!=?", (date, time, user_id))
    opponent = cursor.fetchone()

    if opponent:
        await callback.message.answer(f"‚úÖ –ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {date} {time}!")
    else:
        await callback.message.answer(f"‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã ({date} {time}).")

# === –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è === #
@dp.message(F.text == "üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT date, time, result FROM matches WHERE team_id=?", (user_id,))
    games = cursor.fetchall()

    if not games:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä.")
        return

    text = "\n".join([f"{d} {t} ‚Äî {r if r else '–æ–∂–∏–¥–∞–Ω–∏–µ'}" for d, t, r in games])
    await message.answer("üìñ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n" + text)

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å—É–¥—å—è) === #
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
async def add_result(message: types.Message):
    cursor.execute("SELECT id, date, time FROM matches WHERE result IS NULL")
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–ù–µ—Ç –º–∞—Ç—á–µ–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"{m[1]} {m[2]}", callback_data=f"setres:{m[0]}")] for m in matches]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", reply_markup=kb)

@dp.callback_query(F.data.startswith("setres:"))
async def ask_result(callback: types.CallbackQuery, state: FSMContext):
    match_id = int(callback.data.split(":")[1])
    await state.update_data(match_id=match_id)
    await state.set_state(AddResult.waiting_result)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")

@dp.message(AddResult.waiting_result)
async def save_result(message: types.Message, state: FSMContext):
    data = await state.get_data()
    match_id = data["match_id"]
    result = message.text

    cursor.execute("UPDATE matches SET result=? WHERE id=?", (result, match_id))
    conn.commit()

    await state.clear()
    await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

# === –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –¥–∞—Ç—É (–¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤ –∏ —Å—É–¥–µ–π) === #
@dp.message(F.text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")
async def results_by_date(message: types.Message):
    cursor.execute("SELECT DISTINCT date FROM matches WHERE result IS NOT NULL ORDER BY date")
    dates = [r[0] for r in cursor.fetchall()]
    if not dates:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=d, callback_data=f"resdate:{d}")] for d in dates]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("resdate:"))
async def show_results(callback: types.CallbackQuery):
    date = callback.data.split(":")[1]

    # –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    cursor.execute("SELECT DISTINCT time FROM matches WHERE date=? AND result IS NOT NULL ORDER BY time", (date,))
    times = [r[0] for r in cursor.fetchall()]

    if not times:
        await callback.message.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
        await callback.answer()
        return

    text_lines = []
    for t in times:
        # –±–µ—Ä–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å)
        cursor.execute("SELECT id, team_id, result FROM matches WHERE date=? AND time=? AND result IS NOT NULL LIMIT 1", (date, t))
        rep = cursor.fetchone()
        if not rep:
            continue
        rep_id, team_a_id, result_text = rep

        # –∏—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –≤ —Ç–æ–π –∂–µ –ø–∞—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cursor.execute("SELECT team_id FROM matches WHERE date=? AND time=? AND team_id!=? LIMIT 1", (date, t, team_a_id))
        opp = cursor.fetchone()
        team_b_id = opp[0] if opp else None

        # –ø–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã commanders
        cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (team_a_id,))
        row_a = cursor.fetchone()
        name_a = row_a[0] if row_a and row_a[0] else str(team_a_id)

        if team_b_id:
            cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (team_b_id,))
            row_b = cursor.fetchone()
            name_b = row_b[0] if row_b and row_b[0] else str(team_b_id)
        else:
            name_b = "???"

        text_lines.append(f"{t} ‚Äî {name_a} vs {name_b} ‚Äî {result_text}")

    text = "\n".join(text_lines)
    await callback.message.answer(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {date}:\n{text}")
    await callback.answer()

# ---------------- START ---------------- #
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
