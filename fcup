import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio

API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü—ã
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    role TEXT,
    team_name TEXT,
    phone TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team_id INTEGER,
    date TEXT,
    time TEXT,
    result TEXT,
    FOREIGN KEY (team_id) REFERENCES users (user_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS match_requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team_id INTEGER,
    date TEXT,
    time TEXT,
    FOREIGN KEY (team_id) REFERENCES users (user_id)
)
""")

conn.commit()

# FSM
class Register(StatesGroup):
    choosing_role = State()
    entering_team = State()
    entering_phone = State()


# –ë–æ—Ç
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(role: str):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    if role == "commander":
        kb.add(KeyboardButton("üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É"))
        kb.add(KeyboardButton("üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    elif role == "referee":
        kb.add(KeyboardButton("üìñ –°–ø–∏—Å–æ–∫ –∏–≥—Ä"))
    return kb


# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    cursor.execute("SELECT role FROM users WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=main_menu(user[0]))
    else:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("üë®‚Äç‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä"), KeyboardButton("‚öñÔ∏è –°—É–¥—å—è"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb)
        await state.set_state(Register.choosing_role)


# –í—ã–±–æ—Ä —Ä–æ–ª–∏
@dp.message(Register.choosing_role)
async def choose_role(message: Message, state: FSMContext):
    if message.text == "üë®‚Äç‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä":
        await state.update_data(role="commander")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
        await state.set_state(Register.entering_team)
    elif message.text == "‚öñÔ∏è –°—É–¥—å—è":
        await state.update_data(role="referee")
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
        await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
        await state.set_state(Register.entering_phone)


# –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Register.entering_team)
async def enter_team(message: Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute("INSERT INTO users (user_id, role, team_name) VALUES (?, ?, ?)",
                   (message.from_user.id, data["role"], message.text))
    conn.commit()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=main_menu("commander"))
    await state.clear()


# –¢–µ–ª–µ—Ñ–æ–Ω —Å—É–¥—å–∏
@dp.message(Register.entering_phone)
async def enter_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = message.contact.phone_number if message.contact else message.text
    cursor.execute("INSERT INTO users (user_id, role, phone) VALUES (?, ?, ?)",
                   (message.from_user.id, data["role"], phone))
    conn.commit()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=main_menu("referee"))
    await state.clear()


# –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É
@dp.message(F.text == "üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")
async def schedule_game(message: Message):
    today = datetime.now()
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    for i in range(7):  # 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
        day = today + timedelta(days=i)
        date_str = day.strftime("%Y-%m-%d")

        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"{date_str} 20:00", callback_data=f"{date_str}_20:00"),
            InlineKeyboardButton(text=f"{date_str} 21:00", callback_data=f"{date_str}_21:00")
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã:", reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query(F.data.contains("_"))
async def save_game_slot(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    date, time = callback.data.split("_")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    cursor.execute("SELECT team_id FROM match_requests WHERE date=? AND time=? AND team_id<>?",
                   (date, time, user_id))
    opponent = cursor.fetchone()

    if opponent:
        # –°–æ–∑–¥–∞—ë–º –º–∞—Ç—á
        cursor.execute("INSERT INTO matches (team_id, date, time, result) VALUES (?, ?, ?, ?)",
                       (user_id, date, time, None))
        cursor.execute("INSERT INTO matches (team_id, date, time, result) VALUES (?, ?, ?, ?)",
                       (opponent[0], date, time, None))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏
        cursor.execute("DELETE FROM match_requests WHERE date=? AND time=?", (date, time))
        conn.commit()

        await callback.message.answer(f"–ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {date} {time} ‚úÖ")
        await bot.send_message(opponent[0], f"–ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {date} {time} ‚úÖ")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
        cursor.execute("INSERT INTO match_requests (team_id, date, time) VALUES (?, ?, ?)",
                       (user_id, date, time))
        conn.commit()
        await callback.message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ {date} {time} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ ‚è≥")

    await callback.answer()


# –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@dp.message(F.text == "üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: Message):
    cursor.execute("SELECT date, time, result FROM matches WHERE team_id=?", (message.from_user.id,))
    matches = cursor.fetchall()

    if matches:
        text = "–í–∞—à–∏ –º–∞—Ç—á–∏:\n\n"
        for m in matches:
            text += f"{m[0]} {m[1]} ‚Äî {m[2] if m[2] else '–µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–Ω'}\n"
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π."

    await message.answer(text)


# –°–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è —Å—É–¥—å–∏
@dp.message(F.text == "üìñ –°–ø–∏—Å–æ–∫ –∏–≥—Ä")
async def list_matches(message: Message):
    cursor.execute("SELECT date, time, team_id FROM matches")
    matches = cursor.fetchall()

    if matches:
        text = "–°–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä:\n\n"
        for m in matches:
            cursor.execute("SELECT team_name FROM users WHERE user_id=?", (m[2],))
            team = cursor.fetchone()
            team_name = team[0] if team else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            text += f"{m[0]} {m[1]} ‚Äî {team_name}\n"
    else:
        text = "–ú–∞—Ç—á–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."

    await message.answer(text)


# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
