import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

DB_PATH = "tournament.db"

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class RegisterTeam(StatesGroup):
    waiting_for_team_name = State()

class ScheduleMatch(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()

class EnterResult(StatesGroup):
    waiting_for_match_id = State()
    waiting_for_result = State()

# --- –ë–î ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS commanders (
            user_id INTEGER PRIMARY KEY,
            team_name TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS matches (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            team_id INTEGER,
            opponent_id INTEGER,
            date TEXT,
            time TEXT,
            result TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Ç—á")],
        [KeyboardButton(text="üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

judge_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öñÔ∏è –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")],
        [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if row:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
        await state.set_state(RegisterTeam.waiting_for_team_name)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(RegisterTeam.waiting_for_team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    team_name = message.text
    user_id = message.from_user.id

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO commanders (user_id, team_name) VALUES (?, ?)", (user_id, team_name))
    conn.commit()
    conn.close()

    await state.clear()
    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{team_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=main_kb)

# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ ---
@dp.message(F.text == "üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Ç—á")
async def schedule_match(message: types.Message, state: FSMContext):
    today = datetime.now().date()
    dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=d)] for d in dates],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞:", reply_markup=kb)
    await state.set_state(ScheduleMatch.waiting_for_date)

@dp.message(ScheduleMatch.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="19:00")],
            [KeyboardButton(text="20:00")],
            [KeyboardButton(text="21:00")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    await state.set_state(ScheduleMatch.waiting_for_time)

@dp.message(ScheduleMatch.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    date = data["date"]
    time = message.text

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
    cursor.execute("SELECT team_id FROM matches WHERE date=? AND time=?", (date, time))
    existing = cursor.fetchone()

    if existing:
        opponent_id = existing[0]
        cursor.execute("INSERT INTO matches (team_id, opponent_id, date, time, result) VALUES (?, ?, ?, ?, ?)",
                       (user_id, opponent_id, date, time, None))
        conn.commit()
        await message.answer(f"‚úÖ –ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {date} –≤ {time}!", reply_markup=main_kb)
        await bot.send_message(chat_id=user_id, text=f"–í–∞—à –º–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {date} –≤ {time}!")
        await bot.send_message(chat_id=opponent_id, text=f"–í–∞—à –º–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {date} –≤ {time}!")
    else:
        cursor.execute("INSERT INTO matches (team_id, date, time, result) VALUES (?, ?, ?, ?)",
                       (user_id, date, time, None))
        conn.commit()
        await message.answer(f"–û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–∞ {date} –≤ {time}...", reply_markup=main_kb)

    conn.close()
    await state.clear()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
@dp.message(F.text == "üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT date, time, result FROM matches WHERE team_id=? OR opponent_id=?", (user_id, user_id))
    matches = cursor.fetchall()
    conn.close()

    if matches:
        text = "üìñ –í–∞—à–∏ –º–∞—Ç—á–∏:\n" + "\n".join([f"{d} {t} ‚Äî {r if r else '–ë–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}" for d, t, r in matches])
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π."
    await message.answer(text)

# --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É ---
@dp.message(F.text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")
async def results_by_date(message: types.Message):
    today = datetime.now().date()
    dates = [(today - timedelta(days=i)).strftime("%d.%m") for i in range(7)]

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=d)] for d in dates],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

# --- –°—É–¥—å—è: –≤–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
@dp.message(F.text == "‚öñÔ∏è –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")
async def enter_result_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–∞—Ç—á–∞:")
    await state.set_state(EnterResult.waiting_for_match_id)

@dp.message(EnterResult.waiting_for_match_id)
async def enter_match_id(message: types.Message, state: FSMContext):
    await state.update_data(match_id=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1):")
    await state.set_state(EnterResult.waiting_for_result)

@dp.message(EnterResult.waiting_for_result)
async def save_result(message: types.Message, state: FSMContext):
    result = message.text
    data = await state.get_data()
    match_id = data["match_id"]

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE matches SET result=? WHERE id=?", (result, match_id))
    conn.commit()
    conn.close()

    await state.clear()
    await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=judge_kb)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
