import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from datetime import datetime, timedelta

API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS commanders (
    user_id INTEGER PRIMARY KEY,
    team_name TEXT,
    phone TEXT
)""")

cursor.execute("""CREATE TABLE IF NOT EXISTS judges (
    user_id INTEGER PRIMARY KEY,
    phone TEXT
)""")

cursor.execute("""CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team_id INTEGER,
    opponent_id INTEGER,
    date TEXT,
    time TEXT,
    result TEXT
)""")

conn.commit()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Registration(StatesGroup):
    waiting_for_role = State()
    waiting_for_phone = State()
    waiting_for_team_name = State()

class Scheduling(StatesGroup):
    choosing_date = State()
    choosing_time = State()

class JudgeFlow(StatesGroup):
    choosing_match = State()
    entering_result = State()

# --- –ö–Ω–æ–ø–∫–∏ ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Ç—á")],
        [KeyboardButton("üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

judge_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("‚öñÔ∏è –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")],
        [KeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")],
            [KeyboardButton("–Ø - —Å—É–¥—å—è")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb)
    await state.set_state(Registration.waiting_for_role)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ–ª–∏ ---
@dp.message(Registration.waiting_for_role, F.text == "–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")
async def commander_registration(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
    await state.update_data(role="commander")
    await state.set_state(Registration.waiting_for_phone)

@dp.message(Registration.waiting_for_role, F.text == "–Ø - —Å—É–¥—å—è")
async def judge_registration(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
    await state.update_data(role="judge")
    await state.set_state(Registration.waiting_for_phone)

# --- –¢–µ–ª–µ—Ñ–æ–Ω ---
@dp.message(Registration.waiting_for_phone, F.contact)
async def save_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    role = data["role"]

    if role == "commander":
        await state.update_data(phone=message.contact.phone_number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Registration.waiting_for_team_name)

    elif role == "judge":
        cursor.execute("INSERT OR REPLACE INTO judges (user_id, phone) VALUES (?, ?)",
                       (message.from_user.id, message.contact.phone_number))
        conn.commit()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=judge_kb)
        await state.clear()

# --- –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Registration.waiting_for_team_name)
async def save_team_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute("INSERT OR REPLACE INTO commanders (user_id, team_name, phone) VALUES (?, ?, ?)",
                   (message.from_user.id, message.text, data["phone"]))
    conn.commit()
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=main_kb)
    await state.clear()

# --- –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Ç—á ---
@dp.message(F.text == "üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Ç—á")
async def choose_date(message: types.Message, state: FSMContext):
    dates = [(datetime.now() + timedelta(days=i)).strftime("%d-%m-%Y") for i in range(7)]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=d, callback_data=f"date:{d}")] for d in dates]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)
    await state.set_state(Scheduling.choosing_date)

@dp.callback_query(Scheduling.choosing_date, F.data.startswith("date:"))
async def choose_time(callback: types.CallbackQuery, state: FSMContext):
    date = callback.data.split(":")[1]
    await state.update_data(date=date)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="19:00", callback_data="time:19:00")],
            [InlineKeyboardButton(text="20:00", callback_data="time:20:00")],
            [InlineKeyboardButton(text="21:00", callback_data="time:21:00")]
        ]
    )
    await callback.message.edit_text(f"–î–∞—Ç–∞ {date} –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    await state.set_state(Scheduling.choosing_time)

@dp.callback_query(Scheduling.choosing_time, F.data.startswith("time:"))
async def save_game_slot(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    date, time = data["date"], callback.data.split(":")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫
    cursor.execute("SELECT id, team_id FROM matches WHERE date=? AND time=? AND opponent_id IS NULL",
                   (date, time))
    row = cursor.fetchone()

    if row:
        match_id, opponent_id = row
        cursor.execute("UPDATE matches SET opponent_id=? WHERE id=?", (user_id, match_id))
        conn.commit()

        # –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (opponent_id,))
        opponent_name = cursor.fetchone()[0]
        cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (user_id,))
        team_name = cursor.fetchone()[0]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–µ–∏–º –∫–æ–º–∞–Ω–¥–∞–º
        await bot.send_message(opponent_id, f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Ç—á: {opponent_name} vs {team_name} ‚Äî {date} {time}")
        await bot.send_message(user_id, f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Ç—á: {opponent_name} vs {team_name} ‚Äî {date} {time}")
    else:
        cursor.execute("INSERT INTO matches (team_id, date, time) VALUES (?, ?, ?)", (user_id, date, time))
        conn.commit()
        await callback.message.answer("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")

    await state.clear()

# --- –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ---
@dp.message(F.text == "üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT date, time, result FROM matches WHERE team_id=? OR opponent_id=?", (user_id, user_id))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return

    cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (user_id,))
    team_name = cursor.fetchone()
    team_name = team_name[0] if team_name else f"ID {user_id}"

    text = f"üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {team_name}:\n"
    for row in rows:
        text += f"{row[0]} {row[1]} - {row[2] or '–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
    await message.answer(text)

# --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É ---
@dp.message(F.text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")
async def choose_result_date(message: types.Message):
    dates = [(datetime.now() - timedelta(days=i)).strftime("%d-%m-%Y") for i in range(7)]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=d, callback_data=f"resdate:{d}")] for d in dates]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("resdate:"))
async def show_results(callback: types.CallbackQuery):
    date = callback.data.split(":")[1]
    cursor.execute("SELECT team_id, opponent_id, time, result FROM matches WHERE date=? AND result IS NOT NULL", (date,))
    rows = cursor.fetchall()
    if not rows:
        await callback.message.answer("–í —ç—Ç–æ—Ç –¥–µ–Ω—å –º–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {date}:\n"
    for row in rows:
        team_id, opponent_id, time, result = row
        cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (team_id,))
        team1 = cursor.fetchone()
        team1 = team1[0] if team1 else f"ID {team_id}"

        cursor.execute("SELECT team_name FROM commanders WHERE user_id=?", (opponent_id,))
        team2 = cursor.fetchone()
        team2 = team2[0] if team2 else f"ID {opponent_id}"

        text += f"{team1} vs {team2} ‚Äî {time} ‚Äî {result}\n"

    await callback.message.answer(text)

# --- –°—É–¥—å—è: –≤–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
@dp.message(F.text == "‚öñÔ∏è –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")
async def judge_choose_match(message: types.Message, state: FSMContext):
    cursor.execute("SELECT id, team_id, opponent_id, date, time FROM matches WHERE result IS NULL AND opponent_id IS NOT NULL")
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{row[3]} {row[4]} ‚Äî {row[1]} vs {row[2]}",
                callback_data=f"judgematch:{row[0]}"
            )] for row in rows
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á:", reply_markup=kb)
    await state.set_state(JudgeFlow.choosing_match)

@dp.callback_query(JudgeFlow.choosing_match, F.data.startswith("judgematch:"))
async def judge_enter_result(callback: types.CallbackQuery, state: FSMContext):
    match_id = int(callback.data.split(":")[1])
    await state.update_data(match_id=match_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3-1):")
    await state.set_state(JudgeFlow.entering_result)

@dp.message(JudgeFlow.entering_result)
async def save_judge_result(message: types.Message, state: FSMContext):
    data = await state.get_data()
    match_id = data["match_id"]
    result = message.text

    cursor.execute("UPDATE matches SET result=? WHERE id=?", (result, match_id))
    conn.commit()

    await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")
    await state.clear()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
