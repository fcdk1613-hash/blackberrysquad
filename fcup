#!/usr/bin/env python3
# fcup ‚Äî —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º 19:00 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–∏—Ä–∞

import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import CommandStart

# ---------- –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω ----------
API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"
# ---------------------------------------

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- DB ---
conn = sqlite3.connect("tournament.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS roles (
    user_id INTEGER PRIMARY KEY,
    role TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS commanders (
    user_id INTEGER PRIMARY KEY,
    phone TEXT,
    team_name TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS judges (
    user_id INTEGER PRIMARY KEY,
    phone TEXT,
    name TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS temp_schedule (
    user_id INTEGER PRIMARY KEY,
    slot TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team1 INTEGER,
    team2 INTEGER,
    slot TEXT,       -- "YYYY-MM-DD HH:MM"
    result TEXT,
    judge_id INTEGER
)
""")
conn.commit()

# --- Bot & Dispatcher ---
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- Keyboards ---
role_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")],
        [KeyboardButton(text="–Ø - —Å—É–¥—å—è")]
    ],
    resize_keyboard=True
)

contact_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

commander_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á")],
        [KeyboardButton(text="üìñ –ú–æ–∏ –º–∞—Ç—á–∏")],
        [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]   # –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤
    ],
    resize_keyboard=True
)

judge_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")],
        [KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")]
    ],
    resize_keyboard=True
)

# --- In-memory state (multi-step) ---
user_state = {}  # user_id -> dict e.g. {"expect_team_name": True} or {"action":"enter_result","match_id":123}

# --- Helpers ---
def dates_remaining_week():
    today = datetime.now().date()
    last = today + timedelta(days=(6 - today.weekday()))
    days = []
    cur = today
    while cur <= last:
        days.append(cur.isoformat())  # YYYY-MM-DD
        cur += timedelta(days=1)
    return days

def send_safe(user_id: int, text: str, reply_markup=None):
    async def _send():
        try:
            await bot.send_message(user_id, text, reply_markup=reply_markup)
        except Exception as e:
            logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å %s: %s", user_id, e)
    asyncio.create_task(_send())

# --- Handlers ---

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_keyboard)


# –†–æ–ª—å: –∫–æ–º–∞–Ω–¥–∏—Ä / —Å—É–¥—å—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ roles –∏ –ø—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç
@dp.message(F.text == "–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä")
async def choose_commander(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR REPLACE INTO roles (user_id, role) VALUES (?, ?)", (user_id, "commander"))
    conn.commit()
    await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_kb)

@dp.message(F.text == "–Ø - —Å—É–¥—å—è")
async def choose_judge(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR REPLACE INTO roles (user_id, role) VALUES (?, ?)", (user_id, "judge"))
    conn.commit()
    await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_kb)


# –ü–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
@dp.message(F.content_type == types.ContentType.CONTACT)
async def process_contact(message: types.Message):
    contact = message.contact
    user_id = message.from_user.id
    phone = contact.phone_number

    role_row = cursor.execute("SELECT role FROM roles WHERE user_id = ?", (user_id,)).fetchone()
    if not role_row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (–∫–æ–º–∞–Ω–¥–∏—Ä –∏–ª–∏ —Å—É–¥—å—è).", reply_markup=role_keyboard)
        return

    role = role_row[0]
    if role == "commander":
        cursor.execute("INSERT OR REPLACE INTO commanders (user_id, phone, team_name) VALUES (?, ?, ?)",
                       (user_id, phone, None))
        conn.commit()
        # –∂–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        user_state[user_id] = {"expect_team_name": True}
        await message.answer("–û—Ç–ª–∏—á–Ω–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).", reply_markup=ReplyKeyboardRemove())
        return

    # judge
    cursor.execute("INSERT OR REPLACE INTO judges (user_id, phone, name) VALUES (?, ?, ?)",
                   (user_id, phone, message.from_user.full_name))
    conn.commit()
    await message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–¥—å—è!", reply_markup=judge_menu)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º)
@dp.message(F.text)
async def handle_text(message: types.Message):
    uid = message.from_user.id
    # 1) –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    st = user_state.get(uid)
    if st and st.get("expect_team_name"):
        team_name = message.text.strip()
        if not team_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        cursor.execute("UPDATE commanders SET team_name = ? WHERE user_id = ?", (team_name, uid))
        conn.commit()
        user_state.pop(uid, None)
        await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{team_name}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=commander_menu)
        return

    # 2) –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—É–¥—å–∏
    if st and st.get("action") == "enter_result":
        match_id = st.get("match_id")
        result_text = message.text.strip()
        cursor.execute("UPDATE matches SET result = ?, judge_id = ? WHERE id = ?", (result_text, uid, match_id))
        conn.commit()

        # notify teams
        cur = cursor.execute("SELECT team1, team2, slot FROM matches WHERE id = ?", (match_id,)).fetchone()
        if cur:
            t1, t2, slot = cur
            send_safe(t1, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ {slot}: {result_text}")
            if t2:
                send_safe(t2, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ {slot}: {result_text}")

        user_state.pop(uid, None)
        await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=judge_menu)
        return

    # 3) –∏–Ω–∞—á–µ ‚Äî –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å —Ç—É—Ç; –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    return


# --- –ö–æ–º–∞–Ω–¥–∏—Ä: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á ---
@dp.message(F.text == "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á")
async def plan_match(message: types.Message):
    uid = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∫–æ–º–∞–Ω–¥–∏—Ä —Å team_name
    row = cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (uid,)).fetchone()
    if not row or not row[0]:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∏—Ä –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    dates = dates_remaining_week()
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=d, callback_data=f"date|{d}")] for d in dates])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π):", reply_markup=kb)

@dp.callback_query(F.data.startswith("date|"))
async def choose_time(callback: types.CallbackQuery):
    date_iso = callback.data.split("|", 1)[1]
    # –í—Ä–µ–º–µ–Ω–∞: 19:00, 20:00, 21:00
    times = ["19:00", "20:00", "21:00"]
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=t, callback_data=f"time|{date_iso}|{t}")] for t in times])
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date_iso}:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("time|"))
async def save_time(callback: types.CallbackQuery):
    _, date_iso, time_str = callback.data.split("|")
    uid = callback.from_user.id

    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∫–æ–º–∞–Ω–¥–∏—Ä —Å team_name
    row = cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (uid,)).fetchone()
    if not row or not row[0]:
        await callback.message.answer("–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.")
        await callback.answer()
        return
    team_name = row[0]
    slot = f"{date_iso} {time_str}"

    # –∏—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –≤ temp_schedule
    opp = cursor.execute("SELECT user_id FROM temp_schedule WHERE slot = ? AND user_id != ?", (slot, uid)).fetchone()
    if opp:
        opponent_id = opp[0]
        # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –µ—Å—Ç—å team_name
        opp_team_row = cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (opponent_id,)).fetchone()
        if not opp_team_row or not opp_team_row[0]:
            # —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à—É –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
            cursor.execute("DELETE FROM temp_schedule WHERE user_id = ?", (opponent_id,))
            conn.commit()
            cursor.execute("INSERT OR REPLACE INTO temp_schedule (user_id, slot) VALUES (?, ?)", (uid, slot))
            conn.commit()
            await callback.message.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ –≤—ã–±—Ä–∞–ª —Å–ª–æ—Ç, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–µ.", reply_markup=commander_menu)
            user_state.pop(uid, None)
            await callback.answer()
            return
        opponent_team = opp_team_row[0]

        # —Å–æ–∑–¥–∞—ë–º –º–∞—Ç—á —Å –¥–≤—É–º—è –∫–æ–º–∞–Ω–¥–∞–º–∏
        cursor.execute("INSERT INTO matches (team1, team2, slot, result, judge_id) VALUES (?, ?, ?, ?, ?)",
                       (team_name, opponent_team, slot, None, None))
        conn.commit()

        # —É–¥–∞–ª—è–µ–º temp_schedule –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç (–¥–ª—è –≤—Å–µ—Ö)
        cursor.execute("DELETE FROM temp_schedule WHERE slot = ?", (slot,))
        conn.commit()

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ user_id)
        await bot.send_message(uid, f"‚úÖ –ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω: {team_name} vs {opponent_team} ‚Äî {slot}", reply_markup=commander_menu)
        send_safe(opponent_id, f"‚úÖ –ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω: {opponent_team} vs {team_name} ‚Äî {slot}")
        user_state.pop(uid, None)
        await callback.answer("–ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω")
        return

    # –∏–Ω–∞—á–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
    cursor.execute("INSERT OR REPLACE INTO temp_schedule (user_id, slot) VALUES (?, ?)", (uid, slot))
    conn.commit()
    await callback.message.answer(f"–°–ª–æ—Ç {slot} –≤—ã–±—Ä–∞–Ω. –ñ–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...", reply_markup=commander_menu)
    await callback.answer()


# --- –ö–æ–º–∞–Ω–¥–∏—Ä: –ú–æ–∏ –º–∞—Ç—á–∏ ---
@dp.message(F.text == "üìñ –ú–æ–∏ –º–∞—Ç—á–∏")
async def my_matches(message: types.Message):
    uid = message.from_user.id
    row = cursor.execute("SELECT team_name FROM commanders WHERE user_id = ?", (uid,)).fetchone()
    if not row or not row[0]:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∏—Ä –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    team_name = row[0]

    rows = cursor.execute("SELECT team1, team2, slot, result FROM matches WHERE team1 = ? OR team2 = ?", (team_name, team_name)).fetchall()
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.")
        return
    text = "üìñ –í–∞—à–∏ –º–∞—Ç—á–∏:\n\n"
    for r in rows:
        t1, t2, slot, res = r
        text += f"{slot} ‚Äî {t1} vs {t2 if t2 else '???'} ‚Äî {res if res else '—Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω'}\n"
    await message.answer(text)


# --- –°—É–¥—å—è: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞")
async def add_result(message: types.Message):
    rows = cursor.execute("SELECT id, team1, team2, slot FROM matches WHERE result IS NULL").fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –º–∞—Ç—á–µ–π –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è.", reply_markup=judge_menu)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"{r[1]} vs {r[2] if r[2] else '???'} ({r[3]})", callback_data=f"match|{r[0]}")] for r in rows])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", reply_markup=kb)

@dp.callback_query(F.data.startswith("match|"))
async def choose_match_for_result(callback: types.CallbackQuery):
    match_id = int(callback.data.split("|", 1)[1])
    user_state[callback.from_user.id] = {"action": "enter_result", "match_id": match_id}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2:1)")
    await callback.answer()


# --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É (–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤, –∏ –¥–ª—è —Å—É–¥–µ–π) ---
@dp.message(F.text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É")
async def results_by_date(message: types.Message):
    rows = cursor.execute("SELECT DISTINCT substr(slot,1,10) FROM matches WHERE result IS NOT NULL ORDER BY substr(slot,1,10)").fetchall()
    dates = [r[0] for r in rows]
    if not dates:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=d, callback_data=f"resdate|{d}")] for d in dates])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@dp.callback_query(F.data.startswith("resdate|"))
async def show_results(callback: types.CallbackQuery):
    date_str = callback.data.split("|",1)[1]
    rows = cursor.execute("SELECT team1, team2, slot, result FROM matches WHERE substr(slot,1,10)=? AND result IS NOT NULL", (date_str,)).fetchall()
    if not rows:
        await callback.message.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å")
        await callback.answer()
        return

    result_text = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {date_str}:\n\n"
    for r in rows:
        t1, t2, slot, res = r
        result_text += f"{slot.split()[1]} ‚Äî {t1} vs {t2 if t2 else '???'} ‚Äî {res}\n"
    await callback.message.answer(result_text)
    await callback.answer()


# --- Fallback debug (–ø–æ—Å–ª–µ–¥–Ω–∏–π) ---
@dp.message(F.text)
async def fallback_debug(message: types.Message):
    known = {
        "–Ø - –∫–æ–º–∞–Ω–¥–∏—Ä", "–Ø - —Å—É–¥—å—è",
        "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
        "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á", "üìñ –ú–æ–∏ –º–∞—Ç—á–∏", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–∞—Ç—É",
        "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞"
    }
    if message.text not in known:
        logger.info("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s (–æ—Ç %s)", message.text, message.from_user.id)


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, —É–¥–∞–ª—è—é webhooks (–µ—Å–ª–∏ –±—ã–ª–∏)")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
