import asyncio
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# üîë –¢–æ–∫–µ–Ω –≤—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ---
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    phone TEXT,
    role TEXT,
    team_name TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team1_id INTEGER,
    team2_id INTEGER,
    date TEXT,
    time TEXT,
    result TEXT
)
""")
conn.commit()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Register(StatesGroup):
    choosing_role = State()
    waiting_for_phone = State()
    waiting_for_team_name = State()

class Commander(StatesGroup):
    choosing_date = State()
    choosing_time = State()

class Referee(StatesGroup):
    choosing_match = State()
    entering_result = State()

# --- –ú–µ–Ω—é ---
def main_menu(role: str):
    if role == "commander":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")],
                [KeyboardButton(text="üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")]
            ],
            resize_keyboard=True
        )
    elif role == "referee":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìñ –°–ø–∏—Å–æ–∫ –∏–≥—Ä")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—à–∏–±–∫–∞")]],
            resize_keyboard=True
        )

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    cursor.execute("SELECT role FROM users WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ", reply_markup=main_menu(user[0]))
    else:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üë®‚Äç‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä"), KeyboardButton(text="‚öñÔ∏è –°—É–¥—å—è")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb)
        await state.set_state(Register.choosing_role)

# --- –í—ã–±–æ—Ä —Ä–æ–ª–∏ ---
@dp.message(Register.choosing_role, F.text.in_(["üë®‚Äç‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä", "‚öñÔ∏è –°—É–¥—å—è"]))
async def choose_role(message: Message, state: FSMContext):
    role = "commander" if message.text == "üë®‚Äç‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä" else "referee"
    await state.update_data(role=role)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", reply_markup=kb)
    await state.set_state(Register.waiting_for_phone)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
@dp.message(Register.waiting_for_phone, F.contact)
async def register_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    role = data["role"]

    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, phone, role) VALUES (?, ?, ?)",
        (message.from_user.id, message.contact.phone_number, role)
    )
    conn.commit()

    if role == "commander":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã üè∑Ô∏è")
        await state.set_state(Register.waiting_for_team_name)
    else:
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–¥—å—è ‚öñÔ∏è", reply_markup=main_menu("referee"))
        await state.clear()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Register.waiting_for_team_name)
async def register_team(message: Message, state: FSMContext):
    team_name = message.text
    cursor.execute("UPDATE users SET team_name=? WHERE user_id=?", (team_name, message.from_user.id))
    conn.commit()

    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ <b>{team_name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ",
                         reply_markup=main_menu("commander"))
    await state.clear()

# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–≥—Ä—ã ---
@dp.message(F.text == "üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä—É")
async def choose_date(message: Message, state: FSMContext):
    today = datetime.today()
    dates = [(today + timedelta(days=i)).strftime("%d.%m") for i in range(7)]

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=d)] for d in dates],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É üìÖ", reply_markup=kb)
    await state.set_state(Commander.choosing_date)

@dp.message(Commander.choosing_date)
async def choose_time(message: Message, state: FSMContext):
    await state.update_data(date=message.text)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="20:00")],
            [KeyboardButton(text="21:00")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è üïí", reply_markup=kb)
    await state.set_state(Commander.choosing_time)

@dp.message(Commander.choosing_time)
async def save_game_slot(message: Message, state: FSMContext):
    data = await state.get_data()
    date, time = data["date"], message.text
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω–∞—è –ø–∞—Ä–∞
    cursor.execute("SELECT id, team1_id, team2_id FROM matches WHERE date=? AND time=?", (date, time))
    existing_match = cursor.fetchone()

    if existing_match:
        # –ï—Å–ª–∏ —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é
        if existing_match[1] and not existing_match[2]:
            cursor.execute("UPDATE matches SET team2_id=? WHERE id=?", (user_id, existing_match[0]))
            conn.commit()
            await message.answer("‚úÖ –ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω! –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫.", reply_markup=main_menu("commander"))
        else:
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥–≤—É–º—è –∫–æ–º–∞–Ω–¥–∞–º–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.", reply_markup=main_menu("commander"))
    else:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
        cursor.execute("INSERT INTO matches (team1_id, date, time) VALUES (?, ?, ?)", (user_id, date, time))
        conn.commit()
        await message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ—Ç, –∂–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.", reply_markup=main_menu("commander"))

    await state.clear()

# --- –°—É–¥—å—è: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä ---
@dp.message(F.text == "üìñ –°–ø–∏—Å–æ–∫ –∏–≥—Ä")
async def referee_matches(message: Message, state: FSMContext):
    cursor.execute("SELECT id, team1_id, team2_id, date, time, result FROM matches")
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π ‚ö†Ô∏è")
        return

    text = "üìñ <b>–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:</b>\n\n"
    for m in matches:
        t1 = m[1] if m[1] else "?"
        t2 = m[2] if m[2] else "?"
        res = m[5] if m[5] else "‚è≥"
        text += f"#{m[0]} | {t1} vs {t2} | {m[3]} {m[4]} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {res}\n"

    await message.answer(text)

# --- –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ---
@dp.message(F.text == "üìñ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: Message, state: FSMContext):
    cursor.execute("SELECT id FROM users WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return

    cursor.execute("SELECT date, time, result FROM matches WHERE team1_id=? OR team2_id=?", (message.from_user.id, message.from_user.id))
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π üì≠")
    else:
        text = "üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"
        for m in matches:
            res = m[2] if m[2] else "‚è≥"
            text += f"{m[0]} {m[1]} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {res}\n"
        await message.answer(text)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
