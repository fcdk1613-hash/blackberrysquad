import datetime
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = "8392821328:AAHHINFxwpSZKGRcv0vQXogGc-pnXcAZspI"
ADMIN_ID = @cheshir43  # —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("tournament.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS teams (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    commander_id INTEGER UNIQUE,
    commander_phone TEXT,
    team_name TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS slots (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team_id INTEGER,
    slot TEXT,
    FOREIGN KEY(team_id) REFERENCES teams(id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    team1_id INTEGER,
    team2_id INTEGER,
    slot TEXT,
    FOREIGN KEY(team1_id) REFERENCES teams(id),
    FOREIGN KEY(team2_id) REFERENCES teams(id)
)
""")
conn.commit()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ===
def main_menu(is_admin=False):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÖ –í—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç—ã", "üìñ –ú–æ–∏ –º–∞—Ç—á–∏")
    if is_admin:
        kb.add("üìã –í—Å–µ –º–∞—Ç—á–∏ (–∞–¥–º–∏–Ω)")
    return kb

def generate_slots_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    now = datetime.datetime.now()
    today = now.date()

    for i in range(0, 7 - today.weekday()):  # –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
        day = today + datetime.timedelta(days=i)
        day_str = day.strftime("%A %d.%m")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, Friday 27.09
        for hour in range(19, 23):
            for minute in [0, 30]:
                if hour == 22 and minute > 0:
                    continue
                time_str = f"{hour:02d}:{minute:02d}"
                kb.add(f"{day_str} {time_str}")
    kb.add("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")
    return kb

def admin_matches_keyboard(matches):
    kb = InlineKeyboardMarkup()
    for match_id, slot, team1, team2 in matches:
        kb.add(InlineKeyboardButton(
            f"‚ùå {slot} | {team1} vs {team2}", callback_data=f"delmatch_{match_id}"
        ))
    return kb

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
phone_btn = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
phone_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(phone_btn)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    is_admin = (message.from_user.id == ADMIN_ID)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_kb)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    phone = message.contact.phone_number
    user_id = message.from_user.id
    cursor.execute("INSERT OR IGNORE INTO teams (commander_id, commander_phone) VALUES (?, ?)", (user_id, phone))
    conn.commit()
    await message.answer("‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda msg: msg.text and not msg.text.startswith("/") and not msg.text.startswith("‚úÖ"))
async def set_team_name(message: types.Message):
    user_id = message.from_user.id
    team_name = message.text.strip()
    cursor.execute("UPDATE teams SET team_name = ? WHERE commander_id = ?", (team_name, user_id))
    conn.commit()

    is_admin = (message.from_user.id == ADMIN_ID)
    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ *{team_name}* –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! üéâ", parse_mode="Markdown", reply_markup=main_menu(is_admin))

# === –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ===
@dp.message_handler(lambda msg: msg.text == "üìÖ –í—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç—ã")
async def choose_time(message: types.Message):
    kb = generate_slots_keyboard()
    await message.answer("–í—ã–±–∏—Ä–∞–π —É–¥–æ–±–Ω—ã–µ —Å–ª–æ—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'.", reply_markup=kb)

@dp.message_handler(lambda msg: msg.text and "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä" in msg.text)
async def finish_slots(message: types.Message):
    is_admin = (message.from_user.id == ADMIN_ID)
    await message.answer("‚úÖ –í—ã–±–æ—Ä —Å–ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω! –¢–µ–ø–µ—Ä—å –∂–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.", reply_markup=main_menu(is_admin))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    user_id = message.from_user.id
    cursor.execute("SELECT id, team_name FROM teams WHERE commander_id = ?", (user_id,))
    team = cursor.fetchone()
    if not team:
        return
    team_id, team_name = team

    cursor.execute("SELECT slot FROM slots WHERE team_id = ?", (team_id,))
    my_slots = [row[0] for row in cursor.fetchall()]

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    cursor.execute("""
        SELECT t.id, t.team_name, t.commander_id, s.slot 
        FROM teams t 
        JOIN slots s ON t.id = s.team_id 
        WHERE t.id != ?
    """, (team_id,))
    other_data = cursor.fetchall()

    for other_id, other_name, other_commander, slot in other_data:
        if slot in my_slots:
            cursor.execute("SELECT id FROM matches WHERE (team1_id=? AND team2_id=? OR team1_id=? AND team2_id=?) AND slot=?", (team_id, other_id, other_id, team_id, slot))
            if cursor.fetchone():
                continue

            cursor.execute("INSERT INTO matches (team1_id, team2_id, slot) VALUES (?, ?, ?)", (team_id, other_id, slot))
            conn.commit()

            await bot.send_message(message.from_user.id, f"üì¢ –ù–∞–π–¥–µ–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ *{other_name}* –≤ {slot}", parse_mode="Markdown")
            await bot.send_message(other_commander, f"üì¢ –ù–∞–π–¥–µ–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ *{team_name}* –≤ {slot}", parse_mode="Markdown")
            break

@dp.message_handler(lambda msg: msg.text and ":" in msg.text and "." in msg.text)
async def save_slot(message: types.Message):
    user_id = message.from_user.id
    slot = message.text.strip()

    cursor.execute("SELECT id FROM teams WHERE commander_id = ?", (user_id,))
    team = cursor.fetchone()
    if not team:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start")
        return

    team_id = team[0]
    cursor.execute("INSERT INTO slots (team_id, slot) VALUES (?, ?)", (team_id, slot))
    conn.commit()

    await message.answer(f"‚úÖ –°–ª–æ—Ç {slot} –¥–æ–±–∞–≤–ª–µ–Ω! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'.")

# === –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –º–∞—Ç—á–µ–π ===
@dp.message_handler(lambda msg: msg.text == "üìñ –ú–æ–∏ –º–∞—Ç—á–∏")
async def my_matches(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT id FROM teams WHERE commander_id = ?", (user_id,))
    team = cursor.fetchone()
    if not team:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    team_id = team[0]
    cursor.execute("""
        SELECT m.slot, t1.team_name, t2.team_name 
        FROM matches m 
        JOIN teams t1 ON m.team1_id = t1.id
        JOIN teams t2 ON m.team2_id = t2.id
        WHERE m.team1_id = ? OR m.team2_id = ?
        ORDER BY m.slot
    """, (team_id, team_id))
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–£ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return

    text = "üìñ –¢–≤–æ–∏ –º–∞—Ç—á–∏:\n\n"
    for slot, team1, team2 in matches:
        text += f"üïí {slot}\n‚öî {team1} vs {team2}\n\n"

    await message.answer(text)

# === –ê–¥–º–∏–Ω ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç—á–µ–π ===
@dp.message_handler(lambda msg: msg.text == "üìã –í—Å–µ –º–∞—Ç—á–∏ (–∞–¥–º–∏–Ω)")
async def show_matches(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    cursor.execute("""
        SELECT m.id, m.slot, t1.team_name, t2.team_name
        FROM matches m
        JOIN teams t1 ON m.team1_id = t1.id
        JOIN teams t2 ON m.team2_id = t2.id
        ORDER BY m.slot
    """)
    matches = cursor.fetchall()

    if not matches:
        await message.answer("–ü–æ–∫–∞ –º–∞—Ç—á–µ–π –Ω–µ—Ç.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π:\n\n"
    for match_id, slot, team1, team2 in matches:
        text += f"ID:{match_id} üïí {slot}\n‚öî {team1} vs {team2}\n\n"

    await message.answer(text, reply_markup=admin_matches_keyboard(matches))

# === –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ ===
@dp.callback_query_handler(lambda c: c.data.startswith("delmatch_"))
async def delete_match(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    match_id = int(callback.data.split("_")[1])
    cursor.execute("DELETE FROM matches WHERE id = ?", (match_id,))
    conn.commit()

    await callback.answer("–ú–∞—Ç—á —É–¥–∞–ª—ë–Ω ‚úÖ")
    await callback.message.edit_text("–ú–∞—Ç—á —É–¥–∞–ª—ë–Ω ‚úÖ")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
